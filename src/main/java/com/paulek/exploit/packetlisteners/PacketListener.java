package com.paulek.exploit.packetlisteners;

import com.paulek.exploit.bucket.Bucket;
import com.paulek.exploit.data.SimplePackets;
import com.paulek.exploit.data.Packet;
import com.paulek.exploit.utils.PenaltyUtil;
import io.netty.channel.*;
import org.bukkit.Bukkit;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;

public class PacketListener implements Listener {

    private static HashMap<String, Bucket> drops = new HashMap<>();

    @EventHandler
    public void onJoin(PlayerJoinEvent e){

        startListening(e.getPlayer());

    }

    @EventHandler
    public void onQuit(PlayerQuitEvent e){

        stopListening(e.getPlayer());

        for(String s : drops.keySet()){

            if(s.contains(e.getPlayer().getName())) drops.remove(s);

        }

    }

    public static void globalStop(){

        for(Player p : Bukkit.getOnlinePlayers()){

            stopListening(p);

        }

    }

    public static void globalStart(){

        for(Player p : Bukkit.getOnlinePlayers()){

            startListening(p);

        }

    }

    public static void stopListening(final Player player){
        final Channel channel = ((CraftPlayer)player).getHandle().playerConnection.networkManager.channel;

        channel.eventLoop().submit(() ->{

            channel.pipeline().remove(player.getName());

            return null;

        });

    }

    private static void startListening(Player player){

        ChannelDuplexHandler channelDuplexHandler = new ChannelDuplexHandler() {

            @Override
            public void channelRead(ChannelHandlerContext channelHandlerContext, Object packet) throws Exception{

                if(drops.containsKey(player.getUniqueId().toString())){

                    Bucket bucket = drops.get(player.getUniqueId().toString());

                    if(bucket.add(1)) {

                        PenaltyUtil.penalty(player);

                    }

                } else {

                    Bucket bucket = new Bucket(SimplePackets.getGlobalPacketLimit(), SimplePackets.getNormalPacketsSend());

                    bucket.add(1);

                    drops.put(player.getUniqueId().toString(), bucket);

                }

                boolean found = false;

                Packet packett = null;

                for(String pa : SimplePackets.getPackets().keySet()){

                    if(packet.toString().contains(pa)){

                        found = true;

                        packett = SimplePackets.getPackets().get(pa);

                    }

                }

                if(found){

                    int limit = packett.getLimit();

                    String name = packett.getName() + player.getUniqueId();

                    if(drops.containsKey(name)){

                        Bucket bucket = drops.get(name);

                        if(!bucket.add(1)){
                            super.channelRead(channelHandlerContext, packet);
                        } else {

                            if (!packett.isCancel()) {

                                PenaltyUtil.penalty(player);

                            }

                        }

                    } else {

                        Bucket bucket = new Bucket(limit, packett.getNormal());

                        bucket.add(1);

                        drops.put(name, bucket);

                        super.channelRead(channelHandlerContext, packet);

                    }

                } else {
                    super.channelRead(channelHandlerContext, packet);
                }
            }

            @Override
            public void write(ChannelHandlerContext channelHandlerContext, Object packet, ChannelPromise channelPromise) throws Exception{
                super.write(channelHandlerContext, packet, channelPromise);
            }


        };

        ChannelPipeline pipeline = ((CraftPlayer)player).getHandle().playerConnection.networkManager.channel.pipeline();
        pipeline.addBefore("packet_handler", player.getName(), channelDuplexHandler);

    }


}
